name: Auto bump version after merge

on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: read

jobs:
  bump-version:
    if: github.actor != 'github-actions[bot]'
    runs-on: ubuntu-latest
    env:
      MAX_FILES_FOR_PATCH: "8"
      MAX_LINES_FOR_PATCH: "200"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Bump project version
        id: bump
        run: |
          python - <<'PY'
          import os
          import pathlib
          import re
          import subprocess

          max_files = int(os.environ.get('MAX_FILES_FOR_PATCH', '0'))
          max_lines = int(os.environ.get('MAX_LINES_FOR_PATCH', '0'))
          base_commit = subprocess.check_output(['git', 'rev-parse', 'HEAD^']).decode().strip()
          diff = subprocess.check_output(['git', 'diff', '--shortstat', base_commit, 'HEAD']).decode()
          files_changed = 0
          lines_changed = 0
          for part in diff.split(','):
              part = part.strip()
              if part.endswith('files changed') or part.endswith('file changed'):
                  files_changed = int(part.split()[0])
              elif part.endswith('insertions(+)') or part.endswith('insertion(+)'):
                  lines_changed += int(part.split()[0])
              elif part.endswith('deletions(-)') or part.endswith('deletion(-)'):
                  lines_changed += int(part.split()[0])

          bump_minor = files_changed > max_files or lines_changed > max_lines
          pyproject = pathlib.Path('pyproject.toml')
          text = pyproject.read_text(encoding='utf-8')
          match = re.search(r'^version\s*=\s*"(\d+)\.(\d+)\.(\d+)"', text, re.MULTILINE)
          if not match:
              raise SystemExit('Version line not found in pyproject.toml')
          major, minor, patch = map(int, match.groups())
          if bump_minor:
              minor += 1
              patch = 0
              level = 'minor'
          else:
              patch += 1
              level = 'patch'
          new_version = f'{major}.{minor}.{patch}'
          new_line = f'version = "{new_version}"'
          text = re.sub(r'^version\s*=\s*"\d+\.\d+\.\d+"', new_line, text, flags=re.MULTILINE)
          pyproject.write_text(text, encoding='utf-8')

          package_init = pathlib.Path('webbed_duck/__init__.py')
          init_text = package_init.read_text(encoding='utf-8')
          init_replacement = re.sub(
              r'(__version__\s*=\s*")([^"\n]+)(")',
              lambda match: f"{match.group(1)}{new_version}{match.group(3)}",
              init_text,
              count=1,
          )
          if init_text == init_replacement:
              raise SystemExit('Unable to locate __version__ assignment in webbed_duck/__init__.py')
          package_init.write_text(init_replacement, encoding='utf-8')
          print('Updated webbed_duck/__init__.py __version__ assignment')
          print(f'Version bumped to {new_version} ({level})')
          print(f'files_changed={files_changed}')
          print(f'lines_changed={lines_changed}')
          print(f'bump_minor={bump_minor}')
          with open(os.environ['GITHUB_OUTPUT'], 'a', encoding='utf-8') as fh:
              fh.write(f'version={new_version}\n')
          PY

      - name: Commit version bump
        id: commit
        run: |
          if git diff --quiet; then
            echo "changed=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add pyproject.toml webbed_duck/__init__.py
          git commit -m "chore: bump version after merge"
          echo "changed=true" >> "$GITHUB_OUTPUT"

      - name: Generate tag notes from changelog
        if: steps.commit.outputs.changed == 'true'
        env:
          VERSION: ${{ steps.bump.outputs.version }}
        run: |
          python - <<'PY'
          import os
          import pathlib
          import subprocess

          version = os.environ["VERSION"]
          tag = f"v{version}"

          try:
              previous_tag = subprocess.check_output(
                  ["git", "describe", "--tags", "--abbrev=0", "HEAD^"],
                  text=True,
              ).strip()
          except subprocess.CalledProcessError:
              previous_tag = ""

          notes = []

          if previous_tag:
              diff_cmd = [
                  "git",
                  "diff",
                  "--unified=0",
                  previous_tag,
                  "HEAD",
                  "--",
                  "CHANGELOG.md",
              ]
              diff_output = subprocess.check_output(diff_cmd, text=True)
              for line in diff_output.splitlines():
                  if line.startswith("+++") or line.startswith("---") or line.startswith("@@"):
                      continue
                  if line.startswith("+"):
                      notes.append(line[1:].rstrip())
          else:
              changelog = subprocess.check_output(
                  ["git", "show", "HEAD:CHANGELOG.md"], text=True
              )
              notes = [line.rstrip() for line in changelog.splitlines()]

          header = [f"Release {tag}"]
          if previous_tag:
              header.append("")
              header.append(f"Changes since {previous_tag}:")
          else:
              header.append("")
              header.append("Initial tagged release for automated versioning.")

          if notes:
              body = ["", *notes]
          else:
              body = ["", "No CHANGELOG updates detected in this release."]

          message = "\n".join(header + body)
          pathlib.Path("tag_message.txt").write_text(f"{message}\n", encoding="utf-8")
          print("Generated tag_message.txt")
          PY

      - name: Create release tag
        id: tag
        if: steps.commit.outputs.changed == 'true'
        run: |
          TAG="v${{ steps.bump.outputs.version }}"
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG already exists, skipping creation"
            echo "created=false" >> "$GITHUB_OUTPUT"
          else
            git tag -a "$TAG" -F tag_message.txt
            echo "created=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Push changes
        if: steps.commit.outputs.changed == 'true'
        run: |
          git push
          if [ "${{ steps.tag.outputs.created }}" = 'true' ]; then
            git push origin "v${{ steps.bump.outputs.version }}"
          fi

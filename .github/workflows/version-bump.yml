name: Auto bump version after merge

on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: read

jobs:
  bump-version:
    if: github.actor != 'github-actions[bot]'
    runs-on: ubuntu-latest
    env:
      MAX_FILES_FOR_PATCH: "8"
      MAX_LINES_FOR_PATCH: "200"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Bump project version
        id: bump
        run: |
          python - <<'PY'
          import os
          import pathlib
          import re
          import subprocess

          max_files = int(os.environ.get('MAX_FILES_FOR_PATCH', '0'))
          max_lines = int(os.environ.get('MAX_LINES_FOR_PATCH', '0'))
          base_commit = subprocess.check_output(['git', 'rev-parse', 'HEAD^']).decode().strip()
          diff = subprocess.check_output(['git', 'diff', '--shortstat', base_commit, 'HEAD']).decode()
          files_changed = 0
          lines_changed = 0
          for part in diff.split(','):
              part = part.strip()
              if part.endswith('files changed') or part.endswith('file changed'):
                  files_changed = int(part.split()[0])
              elif part.endswith('insertions(+)') or part.endswith('insertion(+)'):
                  lines_changed += int(part.split()[0])
              elif part.endswith('deletions(-)') or part.endswith('deletion(-)'):
                  lines_changed += int(part.split()[0])

          bump_minor = files_changed > max_files or lines_changed > max_lines
          pyproject = pathlib.Path('pyproject.toml')
          text = pyproject.read_text()
          match = re.search(r'^version\s*=\s*"(\d+)\.(\d+)\.(\d+)"', text, re.MULTILINE)
          if not match:
              raise SystemExit('Version line not found in pyproject.toml')
          major, minor, patch = map(int, match.groups())
          if bump_minor:
              minor += 1
              patch = 0
              level = 'minor'
          else:
              patch += 1
              level = 'patch'
          new_version = f'{major}.{minor}.{patch}'
          new_line = f'version = "{new_version}"'
          text = re.sub(r'^version\s*=\s*"\d+\.\d+\.\d+"', new_line, text, flags=re.MULTILINE)
          pyproject.write_text(text)
          print(f'Version bumped to {new_version} ({level})')
          print(f'files_changed={files_changed}')
          print(f'lines_changed={lines_changed}')
          print(f'bump_minor={bump_minor}')
          with open(os.environ['GITHUB_OUTPUT'], 'a', encoding='utf-8') as fh:
              fh.write(f'version={new_version}\n')
          PY

      - name: Commit version bump
        id: commit
        run: |
          if git diff --quiet; then
            echo "changed=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add pyproject.toml
          git commit -m "chore: bump version after merge"
          echo "changed=true" >> "$GITHUB_OUTPUT"

      - name: Create release tag
        id: tag
        if: steps.commit.outputs.changed == 'true'
        run: |
          TAG="v${{ steps.bump.outputs.version }}"
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG already exists, skipping creation"
            echo "created=false" >> "$GITHUB_OUTPUT"
          else
            git tag -a "$TAG" -m "Release $TAG"
            echo "created=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Push changes
        if: steps.commit.outputs.changed == 'true'
        run: |
          git push
          if [ "${{ steps.tag.outputs.created }}" = 'true' ]; then
            git push origin "v${{ steps.bump.outputs.version }}"
          fi
